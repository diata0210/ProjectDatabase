// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ProjectDatabase.Models;

#nullable disable

namespace ProjectDatabase.Migrations
{
    [DbContext(typeof(OrderDbContext))]
    partial class OrderDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ProjectDatabase.Models.Customer", b =>
                {
                    b.Property<string>("id")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<DateTime>("dob")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("membership_id")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("membership_id");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("ProjectDatabase.Models.District", b =>
                {
                    b.Property<string>("id")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("province_id")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.HasKey("id");

                    b.HasIndex("province_id");

                    b.ToTable("District");
                });

            modelBuilder.Entity("ProjectDatabase.Models.Membership", b =>
                {
                    b.Property<string>("id")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<float>("discount_value")
                        .HasColumnType("real");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("id");

                    b.ToTable("Membership");
                });

            modelBuilder.Entity("ProjectDatabase.Models.Order", b =>
                {
                    b.Property<string>("id")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<DateTime>("create_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("create_by")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("customer_id")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<decimal>("discount_membership")
                        .HasColumnType("numeric");

                    b.Property<decimal>("final_price")
                        .HasColumnType("numeric");

                    b.Property<string>("note")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("store_id")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<decimal>("total_price")
                        .HasColumnType("numeric");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<DateTime>("update_at")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("id");

                    b.HasIndex("create_by");

                    b.HasIndex("customer_id");

                    b.HasIndex("store_id");

                    b.HasIndex("type");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("ProjectDatabase.Models.Order_type", b =>
                {
                    b.Property<string>("id")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("id");

                    b.ToTable("Order_type");
                });

            modelBuilder.Entity("ProjectDatabase.Models.Orderline", b =>
                {
                    b.Property<string>("id")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("order_id")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("product_id")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<int>("quantity")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("order_id");

                    b.HasIndex("product_id");

                    b.ToTable("Orderline");
                });

            modelBuilder.Entity("ProjectDatabase.Models.Product", b =>
                {
                    b.Property<string>("id")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<decimal?>("Price")
                        .IsRequired()
                        .HasColumnType("numeric");

                    b.Property<DateTime>("deleteAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float>("discount")
                        .HasColumnType("real");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("id");

                    b.HasIndex("type");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("ProjectDatabase.Models.Product_type", b =>
                {
                    b.Property<string>("id")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("id");

                    b.ToTable("Product_Type");
                });

            modelBuilder.Entity("ProjectDatabase.Models.Province", b =>
                {
                    b.Property<string>("id")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("id");

                    b.ToTable("Province");
                });

            modelBuilder.Entity("ProjectDatabase.Models.Role", b =>
                {
                    b.Property<string>("id")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("ProjectDatabase.Models.Store", b =>
                {
                    b.Property<string>("id")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("district_id")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("province_id")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.HasKey("id");

                    b.HasIndex("district_id");

                    b.HasIndex("province_id");

                    b.ToTable("Store");
                });

            modelBuilder.Entity("ProjectDatabase.Models.Store_product", b =>
                {
                    b.Property<string>("id")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("product_id")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<int>("quantity")
                        .HasColumnType("integer");

                    b.Property<string>("store_id")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.HasKey("id");

                    b.HasIndex("product_id");

                    b.HasIndex("store_id");

                    b.ToTable("Store_product");
                });

            modelBuilder.Entity("ProjectDatabase.Models.User", b =>
                {
                    b.Property<string>("id")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)");

                    b.Property<string>("role_id")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("store_id")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("id");

                    b.HasIndex("role_id");

                    b.HasIndex("store_id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("ProjectDatabase.Models.Customer", b =>
                {
                    b.HasOne("ProjectDatabase.Models.Membership", "Membership")
                        .WithMany("Customer")
                        .HasForeignKey("membership_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Membership");
                });

            modelBuilder.Entity("ProjectDatabase.Models.District", b =>
                {
                    b.HasOne("ProjectDatabase.Models.Province", "Province")
                        .WithMany("District")
                        .HasForeignKey("province_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Province");
                });

            modelBuilder.Entity("ProjectDatabase.Models.Order", b =>
                {
                    b.HasOne("ProjectDatabase.Models.User", "User")
                        .WithMany("Order")
                        .HasForeignKey("create_by");

                    b.HasOne("ProjectDatabase.Models.Customer", "Customer")
                        .WithMany("Order")
                        .HasForeignKey("customer_id");

                    b.HasOne("ProjectDatabase.Models.Store", "Store")
                        .WithMany("Order")
                        .HasForeignKey("store_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectDatabase.Models.Order_type", "Order_type")
                        .WithMany("Order")
                        .HasForeignKey("type")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Order_type");

                    b.Navigation("Store");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjectDatabase.Models.Orderline", b =>
                {
                    b.HasOne("ProjectDatabase.Models.Order", "Order")
                        .WithMany("Orderlines")
                        .HasForeignKey("order_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectDatabase.Models.Product", "Product")
                        .WithMany("Orderline")
                        .HasForeignKey("product_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ProjectDatabase.Models.Product", b =>
                {
                    b.HasOne("ProjectDatabase.Models.Product_type", "Product_type")
                        .WithMany("Product")
                        .HasForeignKey("type")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product_type");
                });

            modelBuilder.Entity("ProjectDatabase.Models.Store", b =>
                {
                    b.HasOne("ProjectDatabase.Models.District", "District")
                        .WithMany("Store")
                        .HasForeignKey("district_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectDatabase.Models.Province", "Province")
                        .WithMany("Store")
                        .HasForeignKey("province_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("ProjectDatabase.Models.Store_product", b =>
                {
                    b.HasOne("ProjectDatabase.Models.Product", "Product")
                        .WithMany("Store_product")
                        .HasForeignKey("product_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectDatabase.Models.Store", "Store")
                        .WithMany("Store_product")
                        .HasForeignKey("store_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("ProjectDatabase.Models.User", b =>
                {
                    b.HasOne("ProjectDatabase.Models.Role", "Role")
                        .WithMany("User")
                        .HasForeignKey("role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectDatabase.Models.Store", "Store")
                        .WithMany("User")
                        .HasForeignKey("store_id");

                    b.Navigation("Role");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("ProjectDatabase.Models.Customer", b =>
                {
                    b.Navigation("Order");
                });

            modelBuilder.Entity("ProjectDatabase.Models.District", b =>
                {
                    b.Navigation("Store");
                });

            modelBuilder.Entity("ProjectDatabase.Models.Membership", b =>
                {
                    b.Navigation("Customer");
                });

            modelBuilder.Entity("ProjectDatabase.Models.Order", b =>
                {
                    b.Navigation("Orderlines");
                });

            modelBuilder.Entity("ProjectDatabase.Models.Order_type", b =>
                {
                    b.Navigation("Order");
                });

            modelBuilder.Entity("ProjectDatabase.Models.Product", b =>
                {
                    b.Navigation("Orderline");

                    b.Navigation("Store_product");
                });

            modelBuilder.Entity("ProjectDatabase.Models.Product_type", b =>
                {
                    b.Navigation("Product");
                });

            modelBuilder.Entity("ProjectDatabase.Models.Province", b =>
                {
                    b.Navigation("District");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("ProjectDatabase.Models.Role", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjectDatabase.Models.Store", b =>
                {
                    b.Navigation("Order");

                    b.Navigation("Store_product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjectDatabase.Models.User", b =>
                {
                    b.Navigation("Order");
                });
#pragma warning restore 612, 618
        }
    }
}
