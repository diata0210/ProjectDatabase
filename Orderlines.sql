-- Table: public.Orderlines

-- DROP TABLE IF EXISTS public."Orderlines";

CREATE TABLE IF NOT EXISTS public."Orderlines"
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    product_id integer NOT NULL,
    quantity integer NOT NULL,
    order_id integer NOT NULL,
    CONSTRAINT "PK_Orderlines" PRIMARY KEY (id),
    CONSTRAINT "FK_Orderlines_Orders_order_id" FOREIGN KEY (order_id)
        REFERENCES public."Orders" (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE CASCADE,
    CONSTRAINT "FK_Orderlines_Products_product_id" FOREIGN KEY (product_id)
        REFERENCES public."Products" (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE CASCADE
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public."Orderlines"
    OWNER to postgres;
-- Index: IX_Orderlines_order_id

-- DROP INDEX IF EXISTS public."IX_Orderlines_order_id";

CREATE INDEX IF NOT EXISTS "IX_Orderlines_order_id"
    ON public."Orderlines" USING btree
    (order_id ASC NULLS LAST)
    TABLESPACE pg_default;
-- Index: IX_Orderlines_product_id

-- DROP INDEX IF EXISTS public."IX_Orderlines_product_id";

CREATE INDEX IF NOT EXISTS "IX_Orderlines_product_id"
    ON public."Orderlines" USING btree
    (product_id ASC NULLS LAST)
    TABLESPACE pg_default;

-- Trigger: calculate_total_price_trigger

-- DROP TRIGGER IF EXISTS calculate_total_price_trigger ON public."Orderlines";

CREATE TRIGGER calculate_total_price_trigger
    AFTER INSERT OR DELETE OR UPDATE 
    ON public."Orderlines"
    FOR EACH ROW
    EXECUTE FUNCTION public.calculate_total_price();

-- Trigger: check_order_product_trigger

-- DROP TRIGGER IF EXISTS check_order_product_trigger ON public."Orderlines";

CREATE TRIGGER check_order_product_trigger
    BEFORE INSERT OR DELETE OR UPDATE 
    ON public."Orderlines"
    FOR EACH ROW
    EXECUTE FUNCTION public.check_order_product();